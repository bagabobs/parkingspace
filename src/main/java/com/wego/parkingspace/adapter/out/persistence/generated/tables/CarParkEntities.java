/*
 * This file is generated by jOOQ.
 */
package com.wego.parkingspace.adapter.out.persistence.generated.tables;


import com.wego.parkingspace.adapter.out.persistence.generated.Keys;
import com.wego.parkingspace.adapter.out.persistence.generated.Public;
import com.wego.parkingspace.adapter.out.persistence.generated.tables.records.CarParkEntitiesRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CarParkEntities extends TableImpl<CarParkEntitiesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.car_park_entities</code>
     */
    public static final CarParkEntities CAR_PARK_ENTITIES = new CarParkEntities();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CarParkEntitiesRecord> getRecordType() {
        return CarParkEntitiesRecord.class;
    }

    /**
     * The column <code>public.car_park_entities.car_park_num</code>.
     */
    public final TableField<CarParkEntitiesRecord, String> CAR_PARK_NUM = createField(DSL.name("car_park_num"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.car_park_entities.address</code>.
     */
    public final TableField<CarParkEntitiesRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.car_park_entities.x_coordinate</code>.
     */
    public final TableField<CarParkEntitiesRecord, Double> X_COORDINATE = createField(DSL.name("x_coordinate"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.car_park_entities.y_coordinate</code>.
     */
    public final TableField<CarParkEntitiesRecord, Double> Y_COORDINATE = createField(DSL.name("y_coordinate"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.car_park_entities.total_lots</code>.
     */
    public final TableField<CarParkEntitiesRecord, Integer> TOTAL_LOTS = createField(DSL.name("total_lots"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.car_park_entities.available_lots</code>.
     */
    public final TableField<CarParkEntitiesRecord, Integer> AVAILABLE_LOTS = createField(DSL.name("available_lots"), SQLDataType.INTEGER, this, "");

    private CarParkEntities(Name alias, Table<CarParkEntitiesRecord> aliased) {
        this(alias, aliased, null);
    }

    private CarParkEntities(Name alias, Table<CarParkEntitiesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.car_park_entities</code> table reference
     */
    public CarParkEntities(String alias) {
        this(DSL.name(alias), CAR_PARK_ENTITIES);
    }

    /**
     * Create an aliased <code>public.car_park_entities</code> table reference
     */
    public CarParkEntities(Name alias) {
        this(alias, CAR_PARK_ENTITIES);
    }

    /**
     * Create a <code>public.car_park_entities</code> table reference
     */
    public CarParkEntities() {
        this(DSL.name("car_park_entities"), null);
    }

    public <O extends Record> CarParkEntities(Table<O> child, ForeignKey<O, CarParkEntitiesRecord> key) {
        super(child, key, CAR_PARK_ENTITIES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<CarParkEntitiesRecord> getPrimaryKey() {
        return Keys.CAR_PARK_PK;
    }

    @Override
    public CarParkEntities as(String alias) {
        return new CarParkEntities(DSL.name(alias), this);
    }

    @Override
    public CarParkEntities as(Name alias) {
        return new CarParkEntities(alias, this);
    }

    @Override
    public CarParkEntities as(Table<?> alias) {
        return new CarParkEntities(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CarParkEntities rename(String name) {
        return new CarParkEntities(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CarParkEntities rename(Name name) {
        return new CarParkEntities(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CarParkEntities rename(Table<?> name) {
        return new CarParkEntities(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<String, String, Double, Double, Integer, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super String, ? super String, ? super Double, ? super Double, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super String, ? super String, ? super Double, ? super Double, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
